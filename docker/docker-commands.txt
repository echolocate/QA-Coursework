images
------
docker images
docker rmi <image name>
docker pull <image name>
docker build Dockerfile <name>

containers
----------
docker run <image name> [command]
docker ps   (shows ports)
docker ps -a
docker stop <name>
docker exec <name>
docker run -d <name>   (background)
docker run -it <image name>
docker run -p host:container <image>

    volume mount:
docker volume create <dir name>   (in /var/lib/docker/dir name)
    bind mount: mount any folder (not only var/lib/docker/...)
docker run -v hostdir:containerdir (persistant data)
eg: docker run -v /data/mysql:/var/lib/mysql mysql
    outdated, use instead:
docker run \ --mount type=bind,source=/data/mysql,target=/var/lib/mysql mysql

docker inspect <container name>
docker logs <container name>
docker history <name>
                    
source code: import os... colour=os.environ.get('APP_COLOUR')
docker run -e APP_COLOUR=blue <container name>

docker network create my-network
docker run -d --network my-network --name server bobcrutchley/python-http-server:latest

===================================================

newgrp docker
docker ps
docker run --rm <image>
docker login
docker search <image on dockerhub>
docker pull <image on dockerhub>
docker push <image on local>
docker images
docker rmi <local image> delete image on local
docker rmi $(docker images -q) deletes all images on local
docker tag java markpdance/java:8
docker run -p 80:5000 --name todo-app -e DATABASE_URI=mdmysqlserver... 
docker exec -it todo-app /bin/bash ----enters containers, exit to get out
docker ps -a (lists all containers)
docker stop <random NAME, provided by ps -a>
docker rm -f <random NAME>  (force stop/delete container)
docker images (lists all images)
docker network create my-network
docker inspect <container name>
docker run -p 80:5000 --name todo-app --network my-network nginx (example) 
Networking:
(Create a New Bridge Network)
docker network create my-network
(Create an Application Container)  
docker run -d --network my-network --name server bobcrutchley/python-http-server:latest  
(Create an NGINX Container)
docker run -d --network my-network -p 80:80 --name nginx lukebenson1/docker-networking-nginx
(Access on browser vm name) or:
curl localhost